# -*- coding: utf-8 -*-
"""정예린_0312_복습.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/172chNWkIdaKDEHxFeKeHNxI3hfpsPCBJ

## 정규식 2

- 정규식 요약 설명
- \d : [0-9]
- \D : [^0-9] : 숫자를 제외한 모든 문자
- \w : [a-zA-Z0-9_]와 같음 영문, 대소문자, 밑줄문자, 숫자
- \W : [^a-zA-Z0-9_]와 같음 영문, 대소문자, 밑줄문자, 숫자 제외한 모든문자
"""

import re

re.match('a*b','b')
# a가 0개 이상 있어도 찾을 수 있음

re.match('a+b','b')
# a가 1개 이상 있어야 찾을 수 있음

re.match('a*b','ab')

re.match('a+b','ab')

"""한글, 문자개수, 영어, 숫자 다 확인
- 특수문자 &&^^%$%$##@@
- \특수문자
"""

# 특수문자 있는 경우
re.search('\*', '123*3')

re.search('\*', '123****3')

# * 별(특수문자)을 다 찾을 경우
re.search('\*+', '123****3')

re.match('\d','123123123124123123')

re.match('\d+','123123123124123123')

# 숫자를 제외한 모든 문자
re.match('\D+','123123123124123123')

re.match('\D+','123123123124123123')

re.search('\D+','123123123124123123dsadfa')

re.match('\w','Python_Python_123123123123')

re.match('\w+','Python_Python_123123123123')

re.match('\W+','Python_Python_123123123123!!!!!')

re.search('\W+','Python_Python_123123123123!!!!!')

"""공백처리
- ' ' 공백을 넣어도 되고, \s \S 로로 표현가능

"""

re.match('[a-z0-9]','hello 12345')

re.match('[a-z0-9]+','hello 12345')

re.match('[a-z0-9 ]+','hello 12345')

re.match('[a-z0-9\s]+','hello 12345')

"""### Group 사용하기
- (정규표현식)(정규표현식) 덩어리로 묶을 수 있음
- 객체를 넣을 변수.group(그룹의 숫자)
"""

df_re = re.match('([0-9]+) ([a-z]+)', '1234 abc')
df_re

df_re.group(1)

df_re.group(2)

df_re.group(0)

df_re.groups()

"""### 기존함수로 문자열 응용하기
- findall
- re.findall('패턴','문자열')
"""

# 리스트화
re.findall('[0-9]+','여러분 1231 숫자를 123123 다 가지고 올 까요?!@3123')

abc = re.findall('[0-9]+','여러분 1231 숫자를 123123 다 가지고 올 까요?!@3123')
abc

re.findall('[가-힣]+','여러분 1231 숫자를 123123 다 가지고 올 까요?!@3123')

"""문자열을 바꿀 수 있음
- re.sub('패턴', '바꿀문자열', '문자열', 바꿀횟수)
"""

re.sub('[0-9]+','hi','여러분 1231 숫자를 123123 다 가지고 올 까요?!@3123')
# 숫자가 모두 hi로 바뀜

# | or 두 개 중에 있으면 바꾸기
re.sub('a|b|e','안녕','a b dedfe a b')

"""### 퀴즈
- 이메일을 찾을 수 있는 정규식을 만들자!
- 첫 이메일 시작은 영어 소문자만 가능하고 이메일은 abc123 숫자도 붙을 수 있다. (ex. abc_323 가능)
- .com / .net 만 가능
- ex) ppp@naver.com , gmail.com, .net 

"""

re.match('[a-z]{1}\w+@[a-zA-Z]+(\.com|\.net)','abc_123@naver_com')

re.match('[A-Za-z]+[A-Za-z0-9_]*@[A-Za-z]+\.[com|net]+$','Abc_123@naver_com')

"""# 텍스트 분석
- 문자열 데이터를 분석
- 숫자가 아니라 문자 데이터라서 문자열 데이터를 수치로 만드는 것이 중요
- 문자열 데이터를 어떻게 숫자로 만들 것인가?
- 빈도, 감성분석, 머신러닝으로 예측 -> 문자열 데이터에 대한 형태소를 나눠야 한다.
- 형태소라는 것은 문자데이터에서 주어, 목적어, 서술어 구성성분으로 나눈다.
- 한글 konlp 자연어 관련해서 이미 만든 패키지
- 영어 okt, twitter 등등 형태소를 분석할 수 있는 패키지
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

survey = pd.read_csv('/content/drive/MyDrive/[BDAA 5기] 데이터 분석 기초반/데이터셋/survey_설문지.csv')
survey

survey['comment']
# 서베이에 대한 응답 데이터 따라서 단순하게 인코딩하기는 어렵다.

survey.isna().sum()

survey = survey.dropna()

survey.isna().sum()

"""데이터 프레임을 가지고 접근 : str 문법 사용"""

survey['comment'] = survey['comment'].str.replace('[a-zA-Z]',"")

survey['comment'] = survey['comment'].str.replace('\(.+?\)',"")
# 괄호 안에 있는 값을 모두 날려버리기

survey['length'] = survey['comment'].str.len()
survey

import matplotlib.pyplot as plt
plt.hist(survey['length'])

"""### 형태소 분석
- pip install 에러 코드 확인
- 설치가 잘 안된다면 konlpy 이걸 설치해야 해서 에러나는 걸 구글링해서 해결
"""

pip install konlpy

import konlpy
konlpy.__version__

from konlpy.tag import Twitter

twt = Twitter()
text = '여러분 정규식 많이 어렵나요? 표정이 밝지 못 해서 제 마음도 너무 슬프네요! 그래도 파이팅!!'
tagging = twt.pos(text)
tagging

"""survey 데이터에서 내가 원하는 품사만 추출해서 가져와보기"""

survey

all_words = []
parts =['Noun']
for i in range(len(survey)):
    text = survey['comment'].iloc[i]
    words = twt.pos(text)
    words_arr = []
    for n in words:
        if n =='EOS' or n =="":continue
        word_tmp = n[0]
        part = n[1]
        if not (part in parts):continue
        words_arr.append(word_tmp)
    all_words.extend(words_arr)
print(all_words)

all_words

# count
all_words_df = pd.DataFrame({'words':all_words, 'count':len(all_words)*[1]})
all_words_df

all_words_df.groupby('words').sum()

"""### 불용어 처리해보기
- 불용어 : 의미 없는 단어 형태로 나누다 보면 수 잘못 나눠진 단어들
- 불용어들을 제거하고 다시 분석을 하기
- 불용어 제거 -> 불용어 사전 / 원하는 불용어를 직접 제거하는 법 가능
"""

words_df_1 = all_words_df.groupby('words').sum()
words_df_1

words_df_1.sort_values('count',ascending = False).head(20)

"""- 수업의 예를 위해서 "더, 수, 좀" 선정"""

stop_words = ['더','수','좀','시','놀']
all_words = []
parts =['Noun']
satisfaction = []

for i in range(len(survey)):
    text = survey['comment'].iloc[i]
    words = twt.pos(text)
    words_arr = []
    for n in words:
        if n =='EOS' or n =="":continue
        word_tmp=n[0]
        part = n[1]
        if not (part in parts):continue
        if word_tmp in stop_words:continue
        words_arr.append(word_tmp)
        satisfaction.append(survey['satisfaction'].iloc[i])
    all_words.extend(words_arr)
print(all_words)

all_words_df_t = pd.DataFrame({'words':all_words, 'satisfaction':satisfaction, 
                               'count':len(all_words)*[1]})

# 만족도 점수가 높은 경우 어떤 Words있나?
all_words_df_t.groupby('words').sum()['satisfaction']

"""만족도 점수를 기반으로 해서 코사인 유사도, 다양한 기술적인 지표가 있음
- 코사인 유사도로 리뷰에 대한 분석을 진행하려고 함
"""

words_sf = all_words_df_t.groupby('words').mean()['satisfaction']
words_count = all_words_df_t.groupby('words').sum()['count']
words_df = pd.concat([words_sf, words_count], axis=1)
words_df

# 카운트가 많이 나오는 걸 기준으로 데이터 추리기
words_df = words_df[words_df['count'] >= 3]
words_df

# 형태소 나눈 것을 하나의 데이터프레임으로 만들어서 값을 계산할 수 있게 만든다.
parts =['Noun']
all_words_df = pd.DataFrame()
satisfaction = []
for n in range(len(survey)):
    text = survey['comment'].iloc[n]
    words = twt.pos(text)
    words_df = pd.DataFrame()
    for i in words:
        if i =='EOS' or i =='':continue
        word_tmp = i[0]
        part = i[1]
        if not (part in parts):continue
        words_df[word_tmp]=[1] # 형태소로 나눈 것들은 다 1로 넣기
    all_words_df = pd.concat([all_words_df, words_df],ignore_index =True)

all_words_df = all_words_df.fillna(0)
all_words_df

"""### 코사인 유사도
- 코사인 유사도를 만들기 위해 데이터 정리를 해야 함
- 코사인 유사도를 통해 어떤 리뷰가 거리 기반으로 가까운지 확인하기 위해 target을 정해야 한다.
"""

# target 선정 : 원하는 타겟 값을 기준으로 변경 가능
survey['comment'].iloc[1]
target_text = all_words_df.iloc[1]

survey['comment'].iloc[1]

print(target_text)

#all_words_df= all_words_df.drop('cos_sim',axis = 'columns')

for i in range(len(all_words_df)):
    cos_text = all_words_df.iloc[i]
cos_text

import numpy as np
cos_sim = []
for i in range(len(all_words_df)):
    cos_text = all_words_df.iloc[i]
    cos = np.dot(target_text, cos_text) / (np.linalg.norm(target_text)*np.linalg.norm(cos_text)) # 코사인 유사도 식 구글링
    cos_sim.append(cos)
    
all_words_df['cos_sim'] = cos_sim
all_words_df.sort_values('cos_sim',ascending=False).head()

# 위의 결과값을 인덱스 기준으로 리뷰 유사도 비슷한 내용 확인 가능
print(survey['comment'].iloc[1])
print(survey['comment'].iloc[36])

""" 형태소 분석 후 워드카운팅, 워드클라우드 진행"""